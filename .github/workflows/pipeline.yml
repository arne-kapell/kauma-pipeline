name: KAuMA-Pipeline (labwork-docker)

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      TEST_SERVER:
        description: 'URL of the test server (API)'
        required: false
        type: string
        default: 'https://dhbw.johannes-bauer.com/lwsub/'
      DEFAULT_ASSIGNMENT:
        description: 'Assignment to use'
        type: string
        required: false
        default: 'labwork01'
    secrets:
      CLIENT_ID:
        required: true

jobs:
  # python_stuff:
  #   runs-on: ubuntu-latest
  #   name: Magic Python stuff (TODO)
  #   steps:
  #     - name: dummy
  #       id: py-dummy
  #       run: echo TODO - Python stuff
  check_requirements:
    name: Check requirements
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: needs to contain a "labwork" subdirectory which contains the submission
        id: check-subdir
        run: |
          if [ -d labwork ]; then
            echo "OK"
          else
            echo "ERROR: No \`labwork\` subdirectory found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: build script may be present for compiling code
        id: check-build
        run: |
          if [ -f labwork/build ]; then
            echo "OK"
          else
            echo "WARNING: No \`build\` found (not required)" >> $GITHUB_STEP_SUMMARY
          fi
      - name: build script must be executable
        id: check-build-exec
        run: |
          if [ -f labwork/build ]; then
            if [ -x labwork/build ]; then
              echo "OK"
            else
              echo "ERROR: \`build\` is not executable" >> $GITHUB_STEP_SUMMARY
              echo "*HINT: The git command \`git add --chmod=+x build\` can be used (when inside the \`labwork\` directory)*" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
      - name: run script must be present for running code
        id: check-run
        run: |
          if [ -f labwork/run ]; then
            echo "OK"
          else
            echo "ERROR: No \`run\` found (required)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: run script must be executable
        id: check-run-exec
        run: |
          if [ -x labwork/run ]; then
            echo "OK"
          else
            echo "ERROR: \`run\` is not executable" >> $GITHUB_STEP_SUMMARY
            echo "*HINT: The git command \`git add --chmod=+x run\` can be used (when inside the \`labwork\` directory)*" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
  build_tar_gz:
    name: Build tar.gz
    needs: check_requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build tar.gz
        id: build-tar-gz
        run: |
          tar -czvf submission.tar.gz labwork
      - name: Upload tar.gz
        uses: actions/upload-artifact@v3
        with:
          name: current-submission
          path: submission.tar.gz
  load_assignments:
    name: Load assignments from repository files
    needs: build_tar_gz
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load-assignments.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Load current assignment
        run: |
          if [ -f .current_assignment ]; then
            ass=$(cat .current_assignment | head -n 1)
            echo "Loaded current assignment: $ass"
          else
            ass=${{ inputs.DEFAULT_ASSIGNMENT }}
            echo "No current assignment found, using default: $ass"
            echo "## WARNING" >> $GITHUB_STEP_SUMMARY
            echo "No current assignment found, using default: \`$ass\`" >> $GITHUB_STEP_SUMMARY
            echo "You can set the current assignment by creating a file \`.current_assignment\` containing only the assignment name in the root of your repository. You can also set the default assignment by setting the \`DEFAULT_ASSIGNMENT\` environment variable in the workflow file." >> $GITHUB_STEP_SUMMARY
          fi
          echo "CURRENT_ASSIGNMENT=$ass" >> $GITHUB_ENV
      - name: Load past assignments and combine with current
        run: |
          if [ -f .past_assignments ]; then
            mapfile -t past_as_list < .past_assignments
            echo "Loaded past assignments: $past_as_list (length: ${#past_as_list[@]})"
          else
            echo "No past assignments found"
            echo "## WARNING" >> $GITHUB_STEP_SUMMARY
            echo "No past assignments found" >> $GITHUB_STEP_SUMMARY
            echo "You can set past assignments by creating a file \`.past_assignments\` containing one assignment name per line in the root of your repository." >> $GITHUB_STEP_SUMMARY
          fi
          joined=$past_as_list
          joined+=("${{ env.CURRENT_ASSIGNMENT }}")
          joined_as_json=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${joined[@]}")
          echo "Joined assignments: $joined_as_json"
          echo "::set-output name=matrix::{\"assignments\":$joined_as_json}"
  debug:
    name: Debug
    needs: load_assignments
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        run: |
          echo "Current assignment: ${{ env.CURRENT_ASSIGNMENT }}"
          echo "Matrix: ${{ needs.load_assignments.outputs.matrix }}"
  labwork_docker_run:
    name: Test project inside labwork-docker container
    needs: load_assignments
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load_assignments.outputs.matrix)}}
    steps:
      - name: Clone repository johndoe31415/labwork-docker
        uses: actions/checkout@v3
        with:
          repository: johndoe31415/labwork-docker
      - name: Ping Test-Server
        uses: srt32/uptime@master
        with:
          url-to-hit: ${{ inputs.TEST_SERVER }}
          # expected-statuses: "200"
      - uses: actions/download-artifact@v3
        with:
          name: current-submission
      - name: Pull labwork-docker image
        run: docker pull ghcr.io/johndoe31415/labwork-docker:master
      - name: Run labwork container with submission
        env:
          TARBALL: submission.tar.gz
          SERVER: ${{ inputs.TEST_SERVER }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |
          echo "Executing labwork-docker with submission: $CLIENT_ID | $SERVER | $TARBALL"
          echo "## Container execution logs (\`${{ matrix.assignment  }}\`)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ./run-testcases -n -a ${{ matrix.assignment }} -c $CLIENT_ID -u $SERVER $TARBALL >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  get_stats:
    name: Print stats
    needs: labwork_docker_run
    runs-on: ubuntu-latest
    steps:
      - env:
          SERVER: ${{ inputs.TEST_SERVER }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |
          echo "## Status after executing current submission" >> $GITHUB_STEP_SUMMARY
          echo "| name | description | points |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ----------- | ------ |" >> $GITHUB_STEP_SUMMARY
          res=$(curl -H "Accept: application/json" $SERVER/status/$CLIENT_ID)
          if [ $? -ne 0 ]; then
            echo "ERROR: Could not get status from server"
            exit 1
          fi
          for ass in $(echo "${res}" | jq -r '.payload.assignments[] | @base64'); do
              _jq() {
              echo ${ass} | base64 --decode | jq -r ${1}
              }
            echo "| **$(_jq '.name')** | $(_jq '.description') | **$(_jq '.points')** / $(_jq '.max_points') |" >> $GITHUB_STEP_SUMMARY
          done
